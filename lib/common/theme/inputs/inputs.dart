import 'dart:async';

import 'package:emo_boss/common/generated/l10n.dart';
import 'package:emo_boss/common/styles/styles.dart';
import 'package:emo_boss/common/utils/utils.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_form_builder/flutter_form_builder.dart';
import 'package:flutter_typeahead/flutter_typeahead.dart';
import 'package:form_builder_validators/form_builder_validators.dart';
import 'package:intl/intl.dart';

import 'widgets/widgets.dart';

class CustomInput {
  const CustomInput._();

  static String _getRequiredLabel(String fieldName, {bool isRequired = false}) =>
      "$fieldName${isRequired ? "*" : ""}";

  static InputDecoration _outlineInputDecoration({
    String? labelText,
    TextStyle? labelStyle,
    String? hintText,
    TextStyle? hintTextStyle,
    TextStyle? floatingLabelStyle,
    Color? backgroundColor,
    Color? hoverColor,
    Widget? prefixIcon,
    Widget? suffixIcon,
    EdgeInsetsGeometry? padding,
    Color colorBorder = AppColor.grey300,
    Color colorBorderFocus = AppColor.blueLight,
    Color colorError = AppColor.errorColor,
    Color colorHintText = AppColor.grey600,
    double widthBorder = Strokes.thin,
    double borderRadius = Corners.med,
    double widthBorderFocus = Strokes.thin,
    bool? isDense,
  }) =>
      InputDecoration(
        isDense: isDense,
        labelText: labelText,
        labelStyle: labelStyle,
        floatingLabelStyle: floatingLabelStyle,
        fillColor: backgroundColor,
        hoverColor: hoverColor,
        filled: true,
        prefixIcon: prefixIcon,
        suffixIcon: suffixIcon,
        contentPadding: padding,
        floatingLabelBehavior: FloatingLabelBehavior.always,
        focusedBorder: OutlineInputBorder(
          borderSide: BorderSide(color: colorBorderFocus, width: widthBorderFocus),
          borderRadius: BorderRadius.circular(borderRadius),
        ),
        hintText: hintText,
        enabledBorder: OutlineInputBorder(
          borderSide: BorderSide(color: colorBorder, width: widthBorder),
          borderRadius: BorderRadius.circular(borderRadius),
        ),
        disabledBorder: OutlineInputBorder(
          borderSide: BorderSide(color: colorBorder, width: widthBorder),
          borderRadius: BorderRadius.circular(borderRadius),
        ),
        errorBorder: OutlineInputBorder(
          borderSide: BorderSide(color: colorError, width: widthBorder),
          borderRadius: BorderRadius.circular(borderRadius),
        ),
        focusedErrorBorder: OutlineInputBorder(
          borderSide: BorderSide(color: colorError, width: widthBorder),
          borderRadius: BorderRadius.circular(borderRadius),
        ),
        hintStyle: hintTextStyle ?? TextStyles.input1.copyWith(color: colorHintText),
      );

  static Widget outline({
    Key? key,
    String? name,
    String? initialValue,
    TextEditingController? controller,
    VoidCallback? onTap,
    FormFieldSetter<String>? onSaved,
    ValueChanged<String?>? onChanged,
    VoidCallback? onEditingComplete,
    List<TextInputFormatter>? inputFormatters,
    FormFieldValidator<String>? validator,
    void Function(String?)? onFieldSubmitted,
    double? width,
    double? height,
    TextInputType? type,
    TextInputAction? action,
    Widget? prefixIcon,
    Widget? suffixIcon,
    bool? enabled,
    bool isShow = false,
    bool isRequired = false,
    bool isEmail = false,
    FocusNode? focusNode,
    TextAlign textAlign = TextAlign.start,
    double widthBorder = Strokes.thin,
    double borderRadius = Corners.med,
    double widthBorderFocus = Strokes.thin,
    EdgeInsetsGeometry? padding,
    String hintText = "",
    String labelText = "",
    double? fontSize,
    Color? textColor,
    Color? backgroundColor,
    Color colorBorder = AppColor.grey300,
    Color colorBorderFocus = AppColor.blueLight,
    Color colorHintText = AppColor.grey600,
    Color? cursorColor,
    Color? hoverColor,
    TextStyle? textStyle,
    TextStyle? hintTextStyle,
    TextStyle? labelStyle,
    TextStyle? floatingLabelStyle,
    List<BoxShadow>? boxShadow,
    bool? isDense,
    AutovalidateMode autoValidateMode = AutovalidateMode.disabled,
    int? maxLines = 1,
    int? minLines = 1,
    int? maxLength,
    void Function(bool)? onFocusChange,
    ValueTransformer<String?>? valueTransformer,
  }) =>
      Container(
        padding: EdgeInsets.zero,
        margin: EdgeInsets.zero,
        height: height,
        width: width,
        decoration: BoxDecoration(
          boxShadow: boxShadow,
        ),
        child: Focus(
          onFocusChange: onFocusChange,
          child: FormBuilderTextField(
            key: key,
            autovalidateMode: autoValidateMode,
            valueTransformer: valueTransformer,
            textAlign: textAlign,
            onChanged: onChanged,
            initialValue: initialValue,
            onTap: onTap,
            inputFormatters: inputFormatters,
            onEditingComplete: onEditingComplete,
            onSubmitted: onFieldSubmitted,
            onSaved: onSaved,
            maxLines: maxLines,
            minLines: minLines,
            maxLength: maxLength,
            enabled: enabled ?? true,
            controller: controller,
            focusNode: focusNode,
            textInputAction: action,
            validator: validator,
            keyboardType: type,
            style: textStyle ??
                TextStyles.input1.copyWith(
                  color: textColor,
                  fontSize: fontSize,
                ),
            textAlignVertical: TextAlignVertical.center,
            obscureText: isShow,
            cursorColor: cursorColor,
            scrollPadding: const EdgeInsets.symmetric(horizontal: 5),
            decoration: _outlineInputDecoration(
              borderRadius: borderRadius,
              backgroundColor: backgroundColor,
              colorBorder: colorBorder,
              colorBorderFocus: colorBorderFocus,
              colorHintText: colorHintText,
              floatingLabelStyle: floatingLabelStyle,
              hintText: _getRequiredLabel(hintText, isRequired: isRequired),
              hintTextStyle: hintTextStyle,
              hoverColor: hoverColor,
              labelStyle: labelStyle,
              labelText: _getRequiredLabel(labelText, isRequired: isRequired),
              padding: padding,
              prefixIcon: prefixIcon,
              suffixIcon: suffixIcon,
              widthBorder: widthBorder,
              widthBorderFocus: widthBorderFocus,
              isDense: isDense,
            ),
            name: name ?? '',
          ),
        ),
      );

  static Widget numericOutline({
    Key? key,
    String? name,
    String? initialValue,
    TextEditingController? controller,
    VoidCallback? onTap,
    FormFieldSetter<String>? onSaved,
    ValueChanged<String?>? onChanged,
    VoidCallback? onEditingComplete,
    List<TextInputFormatter>? inputFormatters,
    FormFieldValidator<String>? validator,
    void Function(String?)? onFieldSubmitted,
    double? width,
    double? height,
    TextInputType? type,
    TextInputAction? action,
    Widget? prefixIcon,
    Widget? suffixIcon,
    bool? enabled,
    bool isShow = false,
    bool isRequired = false,
    bool isEmail = false,
    FocusNode? focusNode,
    TextAlign textAlign = TextAlign.start,
    double widthBorder = Strokes.thin,
    double borderRadius = Corners.med,
    double widthBorderFocus = Strokes.thin,
    EdgeInsetsGeometry? padding,
    String hintText = "",
    String labelText = "",
    double? fontSize,
    Color? textColor,
    Color? backgroundColor,
    Color colorBorder = AppColor.grey300,
    Color colorBorderFocus = AppColor.blueLight,
    Color colorHintText = AppColor.grey600,
    Color? cursorColor,
    Color? hoverColor,
    TextStyle? textStyle,
    TextStyle? hintTextStyle,
    TextStyle? labelStyle,
    TextStyle? floatingLabelStyle,
    List<BoxShadow>? boxShadow,
    bool? isDense,
    AutovalidateMode autoValidateMode = AutovalidateMode.disabled,
    int? maxLines = 1,
    int? minLines = 1,
    void Function(bool)? onFocusChange,
    ValueTransformer<String?>? valueTransformer,
  }) =>
      Container(
        padding: EdgeInsets.zero,
        margin: EdgeInsets.zero,
        height: height,
        width: width,
        decoration: BoxDecoration(
          boxShadow: boxShadow,
        ),
        child: Focus(
          onFocusChange: onFocusChange,
          child: FormBuilderTextField(
            key: key,
            autovalidateMode: autoValidateMode,
            textAlign: textAlign,
            onChanged: onChanged,
            initialValue: initialValue,
            onTap: onTap,
            inputFormatters: inputFormatters ??
                [
                  FilteringTextInputFormatter.digitsOnly,
                  AppTextInputFormatter.textWithCommaAndDot,
                ],
            validator: validator ??
                FormBuilderValidators.compose(
                  [
                    FormBuilderValidators.numeric(errorText: S.current.Phai_la_so),
                    FormBuilderValidators.min(0, errorText: S.current.Phai_lon_hon_hoac_bang_0),
                  ],
                ),
            valueTransformer:
                valueTransformer ?? AppTextInputFormatter.reversedFromCommaAndDotToNumber,
            onEditingComplete: onEditingComplete,
            onSubmitted: onFieldSubmitted,
            onSaved: onSaved,
            maxLines: maxLines,
            minLines: minLines,
            enabled: enabled ?? true,
            controller: controller,
            focusNode: focusNode,
            textInputAction: action,
            keyboardType: type ?? TextInputType.number,
            style: textStyle ??
                TextStyles.input1.copyWith(
                  color: textColor,
                  fontSize: fontSize,
                ),
            textAlignVertical: TextAlignVertical.center,
            obscureText: isShow,
            cursorColor: cursorColor,
            scrollPadding: const EdgeInsets.symmetric(horizontal: 5),
            decoration: _outlineInputDecoration(
              borderRadius: borderRadius,
              backgroundColor: backgroundColor,
              colorBorder: colorBorder,
              colorBorderFocus: colorBorderFocus,
              colorHintText: colorHintText,
              floatingLabelStyle: floatingLabelStyle,
              hintText: _getRequiredLabel(hintText, isRequired: isRequired),
              hintTextStyle: hintTextStyle,
              hoverColor: hoverColor,
              labelStyle: labelStyle,
              labelText: _getRequiredLabel(labelText, isRequired: isRequired),
              padding: padding,
              prefixIcon: prefixIcon,
              suffixIcon: suffixIcon,
              widthBorder: widthBorder,
              widthBorderFocus: widthBorderFocus,
              isDense: isDense,
            ),
            name: name ?? '',
          ),
        ),
      );

  static Widget numberFieldWithButton({
    Key? key,
    double? initialValue,
    Color? textBackgroundColor,
    ValueChanged<double?>? onChanged,
  }) =>
      NumberFieldWithButton(
        key: key,
        initialValue: initialValue,
        textBackgroundColor: textBackgroundColor,
        onChanged: onChanged,
      );

  static Widget dropdownOutline<T>({
    Key? key,
    required List<DropdownMenuItem<T>> items,
    String name = '',
    T? initialValue,
    VoidCallback? onTap,
    FormFieldValidator<T>? validator,
    ValueChanged<T?>? onChanged,
    double? width,
    double? height,
    Widget? prefixIcon,
    Widget? suffixIcon,
    bool enabled = true,
    bool isShow = false,
    FocusNode? focusNode,
    double widthBorder = Strokes.thin,
    double borderRadius = Corners.med,
    double widthBorderFocus = Strokes.thin,
    EdgeInsetsGeometry? padding,
    String hintText = "",
    String labelText = "",
    bool isRequired = false,
    double? fontSize,
    Color? textColor,
    Color? backgroundColor,
    Color colorBorder = AppColor.grey300,
    Color colorBorderFocus = AppColor.blueLight,
    Color colorHintText = AppColor.grey600,
    Color? cursorColor,
    Color? hoverColor,
    TextStyle? textStyle,
    TextStyle? hintTextStyle,
    TextStyle? labelStyle,
    TextStyle? floatingLabelStyle,
    List<BoxShadow>? boxShadow,
  }) =>
      Container(
        key: key,
        padding: EdgeInsets.zero,
        margin: EdgeInsets.zero,
        height: height,
        width: width,
        decoration: BoxDecoration(
          boxShadow: boxShadow,
        ),
        child: FormBuilderDropdown<T>(
          initialValue: initialValue,
          items: items,
          onChanged: onChanged,
          onTap: onTap,
          enabled: enabled,
          focusNode: focusNode,
          style: textStyle ??
              TextStyles.input1.copyWith(
                color: textColor,
                fontSize: fontSize,
                height: 0,
              ),
          validator: validator,
          decoration: _outlineInputDecoration(
            borderRadius: borderRadius,
            backgroundColor: backgroundColor,
            colorBorder: colorBorder,
            colorBorderFocus: colorBorderFocus,
            colorHintText: colorHintText,
            floatingLabelStyle: floatingLabelStyle,
            hintText: _getRequiredLabel(hintText, isRequired: isRequired),
            hintTextStyle: hintTextStyle,
            hoverColor: hoverColor,
            labelStyle: labelStyle,
            labelText: _getRequiredLabel(labelText, isRequired: isRequired),
            padding: padding,
            prefixIcon: prefixIcon,
            suffixIcon: suffixIcon,
            widthBorder: widthBorder,
            widthBorderFocus: widthBorderFocus,
          ),
          name: name,
        ),
      );

  static Widget selectDateTimeOutline({
    Key? key,
    String name = "",
    DateTime? initialDate,
    TextEditingController? controller,
    VoidCallback? onEditingComplete,
    String? Function(DateTime?)? validator,
    double? width,
    double? height,
    TextInputAction? action,
    Widget? prefixIcon,
    Widget? suffixIcon,
    bool? enabled,
    bool isShow = false,
    FocusNode? focusNode,
    TextAlign textAlign = TextAlign.start,
    double widthBorder = Strokes.thin,
    double borderRadius = Corners.med,
    double widthBorderFocus = Strokes.thin,
    EdgeInsetsGeometry? padding,
    String hintText = "",
    String labelText = "",
    bool isRequired = false,
    double? fontSize,
    Color? textColor,
    Color? backgroundColor,
    Color colorBorder = AppColor.grey300,
    Color colorBorderFocus = AppColor.blueLight,
    Color colorHintText = AppColor.grey600,
    Color? cursorColor,
    Color? hoverColor,
    TextStyle? textStyle,
    TextStyle? hintTextStyle,
    TextStyle? labelStyle,
    TextStyle? floatingLabelStyle,
    ValueChanged<DateTime?>? onChanged,
    List<BoxShadow>? boxShadow,
    DateTime? firstDate,
    DateTime? lastDate,
  }) =>
      Container(
        key: key,
        padding: EdgeInsets.zero,
        margin: EdgeInsets.zero,
        height: height,
        width: width,
        decoration: BoxDecoration(
          boxShadow: boxShadow,
        ),
        child: FormBuilderDateTimePicker(
          firstDate: firstDate,
          lastDate: lastDate,
          initialDate: initialDate,
          textAlign: textAlign,
          onEditingComplete: onEditingComplete,
          maxLines: 1,
          minLines: 1,
          onChanged: onChanged,
          initialValue: initialDate,
          format: DateFormat('dd/MM/yyyy'),
          inputType: InputType.date,
          enabled: enabled ?? true,
          controller: controller,
          focusNode: focusNode,
          textInputAction: action,
          validator: validator,
          style: textStyle ??
              TextStyles.input1.copyWith(
                color: textColor,
                fontSize: fontSize,
              ),
          obscureText: isShow,
          cursorColor: cursorColor,
          scrollPadding: const EdgeInsets.symmetric(horizontal: 5),
          decoration: _outlineInputDecoration(
            borderRadius: borderRadius,
            backgroundColor: backgroundColor,
            colorBorder: colorBorder,
            colorBorderFocus: colorBorderFocus,
            colorHintText: colorHintText,
            floatingLabelStyle: floatingLabelStyle,
            hintText: _getRequiredLabel(hintText, isRequired: isRequired),
            hintTextStyle: hintTextStyle,
            hoverColor: hoverColor,
            labelStyle: labelStyle,
            labelText: _getRequiredLabel(labelText, isRequired: isRequired),
            padding: padding,
            prefixIcon: prefixIcon,
            suffixIcon: suffixIcon ?? const Icon(Icons.calendar_month),
            widthBorder: widthBorder,
            widthBorderFocus: widthBorderFocus,
          ),
          name: name,
        ),
      );

  static Widget typeAheadOutline({
    Key? key,
    double? height,
    double? width,
    List<BoxShadow>? boxShadow,
    required void Function(dynamic) onSuggestionSelected,
    required Widget Function(BuildContext, dynamic) itemBuilder,
    required FutureOr<Iterable<dynamic>> Function(String) suggestionsCallback,
    TextEditingController? controller,
    Color? backgroundColor,
    Function(dynamic)? onChanged,
    Color colorBorder = AppColor.grey300,
    Color colorBorderFocus = AppColor.blueLight,
    Color colorHintText = AppColor.grey600,
    Color? cursorColor,
    Color? hoverColor,
    TextStyle? textStyle,
    TextStyle? hintTextStyle,
    TextStyle? labelStyle,
    TextStyle? floatingLabelStyle,
    TextInputAction? action,
    Widget? prefixIcon,
    Widget? suffixIcon,
    TextAlign textAlign = TextAlign.start,
    double widthBorder = Strokes.thin,
    double borderRadius = Corners.med,
    double widthBorderFocus = Strokes.thin,
    EdgeInsetsGeometry? padding,
    String hintText = "",
    String labelText = "",
    bool isRequired = false,
    double? fontSize,
    Color? textColor,
    void Function(bool)? onFocusChange,
  }) =>
      Container(
        key: key,
        padding: EdgeInsets.zero,
        margin: EdgeInsets.zero,
        height: height,
        width: width,
        decoration: BoxDecoration(
          boxShadow: boxShadow,
        ),
        child: Focus(
          onFocusChange: onFocusChange,
          child: TypeAheadField(
            onSuggestionSelected: onSuggestionSelected,
            itemBuilder: itemBuilder,
            suggestionsCallback: suggestionsCallback,
            hideOnEmpty: true,
            noItemsFoundBuilder: (BuildContext context) => const SizedBox.shrink(),
            errorBuilder: (BuildContext context, Object? error) =>
                Text('$error', style: TextStyle(color: Theme.of(context).errorColor)),
            textFieldConfiguration: TextFieldConfiguration(
              controller: controller,
              onChanged: onChanged,
              decoration: _outlineInputDecoration(
                borderRadius: borderRadius,
                backgroundColor: backgroundColor,
                colorBorder: colorBorder,
                colorBorderFocus: colorBorderFocus,
                colorHintText: colorHintText,
                floatingLabelStyle: floatingLabelStyle,
                hintText: _getRequiredLabel(hintText, isRequired: isRequired),
                hintTextStyle: hintTextStyle,
                hoverColor: hoverColor,
                labelStyle: labelStyle,
                labelText: _getRequiredLabel(labelText, isRequired: isRequired),
                padding: padding ?? EdgeInsets.symmetric(horizontal: Insets.med),
                prefixIcon: prefixIcon,
                suffixIcon: suffixIcon,
                widthBorder: widthBorder,
                widthBorderFocus: widthBorderFocus,
              ),
            ),
          ),
        ),
      );
}
